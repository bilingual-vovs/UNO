{"ast":null,"code":"var _jsxFileName = \"/home/vova/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/Projects/UNO/app/src/components/GameTable/GameTable.jsx\";\nimport React, { Component } from 'react';\nimport Card from '../Card/Card';\nimport Alert from '../Alert/Alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GameTable extends Component {\n  constructor() {\n    var _this;\n\n    super(...arguments);\n    _this = this;\n    this._lastZIndex = 100;\n    this._botNumber = 3;\n    this.direction = true;\n    this.nowMoving = 0;\n    this._mounted = false;\n    this._colors = [\"yellow\", \"green\", \"blue\", \"red\"];\n    this._cardGroupes = {\n      colode: [],\n      player: [],\n      bots: [],\n      played: [],\n      active: [],\n      move: (id, to) => {\n        let {\n          colode,\n          bots,\n          player\n        } = this._cardGroupes;\n\n        for (let botKey in bots) {\n          let bot = bots[botKey];\n\n          for (let cardKey in bot) {\n            let card = bot[cardKey];\n\n            if (card === id) {\n              let card = this._cardGroupes.bots[botKey][cardKey];\n\n              this._cardGroupes[to].push(card);\n\n              this._cardGroupes.bots[botKey].splice(this._cardGroupes.bots[botKey].indexOf(card), 1);\n            }\n          }\n        }\n\n        for (let cardKey in colode) {\n          let card = colode[cardKey];\n\n          if (card === id) {\n            let card = this._cardGroupes.colode[cardKey];\n\n            this._cardGroupes[to].push(card);\n\n            this._cardGroupes.colode.splice(this._cardGroupes.colode.indexOf(card), 1);\n          }\n        }\n\n        for (let cardKey in player) {\n          let card = player[cardKey];\n\n          if (card === id) {\n            let card = this._cardGroupes.player[cardKey];\n\n            this._cardGroupes[to].push(card);\n\n            this._cardGroupes.player.splice(this._cardGroupes.player.indexOf(card), 1);\n          }\n        }\n      }\n    };\n    this._newActive = [];\n    this.players = [this._cardGroupes.player];\n    this._colodePos = {\n      x: 55,\n      y: 35\n    };\n    this.state = {};\n\n    this._createCard = function (color, cardName, size, posX, posY, face) {\n      var _cardName$, _cardName$2, _cardName$3;\n\n      let addIndx = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : '';\n      let rot = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n      let z = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;\n\n      _this.setState({\n        [color[0] + ((_cardName$ = cardName[0]) !== null && _cardName$ !== void 0 ? _cardName$ : cardName) + addIndx]: {\n          color,\n          cardName,\n          size,\n          posX,\n          posY,\n          face,\n          id: color[0] + ((_cardName$2 = cardName[0]) !== null && _cardName$2 !== void 0 ? _cardName$2 : cardName) + addIndx,\n          rot,\n          z\n        }\n      });\n\n      _this._cardGroupes.colode.push(color[0] + ((_cardName$3 = cardName[0]) !== null && _cardName$3 !== void 0 ? _cardName$3 : cardName) + addIndx);\n    };\n\n    this._locateCard = (id, size, posX, posY, rot, z) => {\n      this.setState(state => {\n        let card = { ...state[id]\n        };\n        card.size = size !== null && size !== void 0 ? size : card[size];\n        card.posX = posX !== null && posX !== void 0 ? posX : card[posX];\n        card.posY = posY !== null && posY !== void 0 ? posY : card[posY];\n        card.rot = rot !== null && rot !== void 0 ? rot : card[rot];\n        card.z = z !== null && z !== void 0 ? z : card[z];\n        return {\n          [id]: card\n        };\n      });\n    };\n\n    this._flipCard = (id, facing) => {\n      this.setState(state => {\n        let card = { ...state[id]\n        };\n        card.face = facing !== null && facing !== void 0 ? facing : !card.face;\n        return {\n          [id]: card\n        };\n      });\n    };\n\n    this._updateCardPosition = () => {\n      let {\n        _cardGroupes: {\n          player,\n          bots\n        },\n        _flipCard,\n        _locateCard\n      } = this;\n      let i = 0;\n      let y = 0 - player.length / 2;\n\n      for (let card in player) {\n        _flipCard(player[card], true);\n\n        _locateCard(player[card], 200, 10 + 70 / player.length / 2 + i * 70 / player.length, 70 + Math.abs(y * y / 5.25) / player.length * 10, 3 * y, i);\n\n        y++;\n        i++;\n      }\n\n      let botCount = 1;\n\n      for (let bot in bots) {\n        let botCrd = bots[bot];\n        i = 0;\n        y = 0 - botCrd.length / 2;\n\n        for (let card in botCrd) {\n          switch (botCount) {\n            case 1:\n              _locateCard(botCrd[card], 120, 0 - Math.abs(y * y / 10), 10 + 50 / botCrd.length / 2 + i * 50 / botCrd.length, 90 * botCount + 3 * y, i);\n\n              break;\n\n            case 2:\n              _locateCard(botCrd[card], 120, 20 + 50 / botCrd.length / 2 + i * 50 / botCrd.length, 0 - Math.abs(y * y / 5.25), 180 - 3 * y, i);\n\n              break;\n\n            case 3:\n              _locateCard(botCrd[card], 120, 93 + Math.abs(y * y / 10), 10 + 50 / botCrd.length / 2 + i * 50 / botCrd.length, 90 * botCount - 3 * y, i);\n\n              break;\n\n            default:\n              break;\n          }\n\n          y++;\n          i++;\n        }\n\n        botCount++;\n      }\n    };\n\n    this._playCard = id => {\n      this._cardGroupes.move(id, \"played\");\n\n      this._lastZIndex += 1;\n\n      this._flipCard(id, true);\n\n      this._locateCard(id, 150, 35, 35, 0, this._lastZIndex);\n\n      this._updateCardPosition();\n\n      this._newActive.push(id);\n\n      console.log(this._cardGroupes.active);\n    };\n\n    this._changeActive = () => {\n      this._cardGroupes.active = this._newActive;\n      this._newActive = [];\n    };\n\n    this.takeCard = () => {\n      let player = this.nowMoving;\n\n      let card = this._cardGroupes.colode.shift();\n\n      if (player === 0) {\n        this._flipCard(card, true);\n\n        this._cardGroupes.player.push(card);\n      } else {\n        this._flipCard(card, false);\n\n        this._cardGroupes.bots[player - 1].push(card);\n      }\n\n      this._updateCardPosition();\n    };\n\n    this.playerPlayCard = card => {\n      let {\n        isPLayers,\n        _cardGroupes: {\n          active\n        },\n        nowMoving,\n        props: {\n          cardAlert\n        }\n      } = this;\n      console.log(active);\n      let activeCard = active[active - 1];\n\n      if ((card[0] === activeCard[0] || card[1] === activeCard[1] || card[0] === \"w\" || activeCard[0] === \"w\") && isPLayers(card) && nowMoving === 0) {\n        this._playCard(card);\n\n        if (card[0] !== \"w\") {\n          this.nextMove();\n        }\n      } else {\n        cardAlert();\n      }\n    };\n\n    this.botMove = () => {\n      let id = this.nowMoving - 1;\n      let {\n        _cardGroupes: {\n          bots,\n          active: activeArr\n        },\n        _playCard: playCard,\n        takeCard\n      } = this;\n      let bot = bots[id];\n      let active = activeArr[activeArr.length - 1];\n      let movementFinished,\n          oneCardHasBeenTaken = false; // if (active[1] === \"p\"){\n      //     takeCard()\n      //     takeCard()\n      // }\n      // if (active.slice(0,2) === \"wp\" || beforeActive.slice(0,2) === \"wp\"){\n      //     takeCard()\n      //     takeCard()\n      //     takeCard()\n      //     takeCard()\n      // }\n\n      if (active[1] === \"s\") {\n        this.nextMove();\n      } else {\n        let a = setInterval(() => {\n          let card = bot.find(elm => elm[0] === active[0] || elm[1] === active[1] || active[0] === 'w');\n          setTimeout(() => {});\n\n          if (card) {\n            playCard(card);\n\n            if (card[0] !== \"w\" && card[1] !== \"r\") {\n              movementFinished = true;\n            }\n          } else {\n            takeCard();\n            oneCardHasBeenTaken = true;\n          }\n\n          if (oneCardHasBeenTaken || movementFinished) {\n            clearInterval(a);\n            this.nextMove();\n          }\n        }, 600);\n      }\n    };\n\n    this.isPLayers = id => {\n      let {\n        player\n      } = this._cardGroupes;\n\n      if (player.indexOf(id) !== -1) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    this.isWining = () => {\n      let player = this.nowMoving;\n\n      if (player) {}\n    };\n\n    this.playerMove = () => {\n      let {\n        _cardGroupes: {\n          player,\n          played\n        },\n        takeCard,\n        nextMove\n      } = this;\n      let beforeActive = played[played.length - 2];\n      let active = played[played.length - 1];\n      let cardTaken = false;\n      let card = player.find(elm => elm[0] === active[0] || elm[1] === active[1] || elm[0] === 'w' || active[0] === 'w'); // if (active[1] === \"p\"){\n      //     takeCard()\n      //     takeCard()\n      // }\n      // if (active.slice(0,2) === \"wp\" || beforeActive.slice(0,2) === \"wp\"){\n      //     takeCard()\n      //     takeCard()\n      //     takeCard()\n      //     takeCard()\n      // }\n\n      this._cardGroupes.active = [];\n\n      if (!card) {\n        takeCard();\n\n        if (cardTaken) {\n          nextMove();\n        }\n\n        cardTaken = true;\n        nextMove();\n      } else if (card[1] === \"s\") {\n        nextMove();\n      }\n    };\n\n    this.nextMove = () => {\n      this._changeActive();\n\n      if (this.direction) {\n        switch (this.nowMoving) {\n          case this._botNumber:\n            this.nowMoving = 0;\n            break;\n\n          default:\n            this.nowMoving++;\n            break;\n        }\n      } else {\n        switch (this.nowMoving) {\n          case 0:\n            this.nowMoving = 3;\n            break;\n\n          default:\n            this.nowMoving--;\n            break;\n        }\n      }\n\n      if (this.nowMoving !== 0) {\n        setTimeout(() => {\n          this.botMove();\n        }, 700);\n      } else {\n        this.playerMove();\n      }\n    };\n\n    this._startGame = () => {};\n  }\n\n  _createCards() {\n    let {\n      _colors,\n      _colodePos,\n      _createCard\n    } = this;\n    let cardNum = 0;\n\n    for (let color in _colors) {\n      for (let i = 0; i < 10; i++) {\n        cardNum++;\n\n        _createCard(_colors[color], i, 150, _colodePos.x + cardNum * 0.01, _colodePos.y + cardNum * -0.1, false);\n      }\n\n      cardNum++;\n\n      _createCard(_colors[color], \"picker\", 150, _colodePos.x + cardNum * 0.01, _colodePos.y + cardNum * -0.1, false);\n\n      cardNum++;\n\n      _createCard(_colors[color], \"reverse\", 150, _colodePos.x + cardNum * 0.01, _colodePos.y + cardNum * -0.1, false);\n\n      cardNum++;\n\n      _createCard(_colors[color], \"skip\", 150, _colodePos.x + cardNum * 0.01, _colodePos.y + cardNum * -0.1, false);\n    }\n\n    for (let i = 0; i < 4; i++) {\n      cardNum++;\n\n      _createCard(\"wild\", \"colora_changer\", 150, _colodePos.x + cardNum * 0.01, _colodePos.y + cardNum * -0.1, false, i);\n\n      cardNum++;\n\n      _createCard(\"wild\", \"pick_four\", 150, _colodePos.x + cardNum * 0.01, _colodePos.y + cardNum * -0.1, false, i);\n    }\n  }\n\n  _generateColode() {\n    this._createCards();\n\n    this._mixColode();\n  }\n\n  _mixColode() {\n    let colodeCopy = [...this._cardGroupes.colode];\n    let newColode = [];\n\n    while (colodeCopy.length > 0) {\n      newColode.push(colodeCopy.splice(Math.floor(Math.random() * colodeCopy.length), 1)[0]);\n    }\n\n    this._cardGroupes.colode = newColode;\n  }\n\n  _dealCards() {\n    let {\n      _cardGroupes: {\n        colode\n      },\n      _botNumber,\n      _playCard: playCard,\n      _flipCard\n    } = this;\n    this._cardGroupes.player = colode.splice(colode.length - 7, 6);\n\n    for (let i = 0; i < _botNumber; i++) {\n      this._cardGroupes.bots[i] = colode.splice(colode.length - 7, 6);\n    }\n\n    this._updateCardPosition();\n\n    _flipCard(colode[colode.length - 1], true);\n\n    playCard(colode[colode.length - 1]);\n\n    this._changeActive();\n  }\n\n  componentDidMount() {\n    if (!this._mounted) {\n      this._generateColode();\n\n      this._dealCards();\n    }\n\n    this._mounted = true;\n  }\n\n  render() {\n    let cards = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"game\",\n      children: Object.values(cards).map(element => {\n        return /*#__PURE__*/_jsxDEV(Card, {\n          playCard: () => {\n            this.playerPlayCard(element.id);\n          },\n          isPlayers: this.isPLayers,\n          ...element\n        }, element.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 65\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default GameTable;","map":{"version":3,"names":["React","Component","Card","Alert","GameTable","_lastZIndex","_botNumber","direction","nowMoving","_mounted","_colors","_cardGroupes","colode","player","bots","played","active","move","id","to","botKey","bot","cardKey","card","push","splice","indexOf","_newActive","players","_colodePos","x","y","state","_createCard","color","cardName","size","posX","posY","face","addIndx","rot","z","setState","_locateCard","_flipCard","facing","_updateCardPosition","i","length","Math","abs","botCount","botCrd","_playCard","console","log","_changeActive","takeCard","shift","playerPlayCard","isPLayers","props","cardAlert","activeCard","nextMove","botMove","activeArr","playCard","movementFinished","oneCardHasBeenTaken","a","setInterval","find","elm","setTimeout","clearInterval","isWining","playerMove","beforeActive","cardTaken","_startGame","_createCards","cardNum","_generateColode","_mixColode","colodeCopy","newColode","floor","random","_dealCards","componentDidMount","render","cards","Object","values","map","element"],"sources":["/home/vova/Документы/Projects/UNO/app/src/components/GameTable/GameTable.jsx"],"sourcesContent":["import React, { Component } from 'react';\n\nimport Card from '../Card/Card';\nimport Alert from '../Alert/Alert';\n\nclass GameTable extends Component {\n    _lastZIndex = 100\n    _botNumber = 3\n\n    direction = true\n    nowMoving = 0\n\n    _mounted = false\n\n    _colors = [\"yellow\", \"green\", \"blue\", \"red\"]\n\n    _cardGroupes = {\n        colode: [],\n        player: [],\n        bots: [],\n        played: [],\n        active: [],\n        move: (id, to) =>{\n            let {colode, bots, player} = this._cardGroupes\n            for(let botKey in bots){\n                let bot = bots[botKey]\n                for (let cardKey in bot){\n                    let card = bot[cardKey]\n                    if (card === id) {\n                        let card = this._cardGroupes.bots[botKey][cardKey]\n                        this._cardGroupes[to].push(card)\n                        this._cardGroupes.bots[botKey].splice(this._cardGroupes.bots[botKey].indexOf(card), 1)\n                    }\n                }\n            }\n            \n            for (let cardKey in colode){\n                let card = colode[cardKey]\n                if (card === id) {\n                    let card = this._cardGroupes.colode[cardKey]\n                    this._cardGroupes[to].push(card)\n                    this._cardGroupes.colode.splice(this._cardGroupes.colode.indexOf(card), 1)\n                }\n            }\n\n            for (let cardKey in player){\n                let card = player[cardKey]\n                if (card === id) {\n                    let card = this._cardGroupes.player[cardKey]\n                    this._cardGroupes[to].push(card)\n                    this._cardGroupes.player.splice(this._cardGroupes.player.indexOf(card), 1)\n                }\n            }\n        }\n    }\n    _newActive = []\n    players = [this._cardGroupes.player]\n\n    _colodePos = {\n        x: 55, \n        y: 35\n    }\n\n\n    state = {\n\n    }\n\n    _createCard = (color, cardName, size, posX, posY, face, addIndx = '', rot = 0, z = 1)=>{\n        this.setState({\n            [color[0] + (cardName[0] ?? cardName) + addIndx]: {\n                color,\n                cardName, \n                size, \n                posX,\n                posY, \n                face,\n                id: color[0] + (cardName[0] ?? cardName) + addIndx, \n                rot,\n                z\n            }\n        })\n        this._cardGroupes.colode.push(color[0] + (cardName[0] ?? cardName) + addIndx)\n    }\n\n    _createCards(){\n        let {_colors, _colodePos, _createCard} = this\n        let cardNum = 0\n        for(let color in _colors){\n            for( let i = 0; i<10; i++){\n                cardNum++\n                _createCard(_colors[color], i, 150, _colodePos.x+cardNum*0.01, _colodePos.y+cardNum*-0.1, false)\n            }\n            cardNum++\n            _createCard(_colors[color], \"picker\", 150, _colodePos.x+cardNum*0.01, _colodePos.y+cardNum*-0.1, false)\n            cardNum++\n            _createCard(_colors[color], \"reverse\", 150, _colodePos.x+cardNum*0.01, _colodePos.y+cardNum*-0.1, false)\n            cardNum++\n            _createCard(_colors[color], \"skip\", 150, _colodePos.x+cardNum*0.01, _colodePos.y+cardNum*-0.1, false)\n        }\n        for(let i = 0; i< 4; i++){\n            cardNum++\n            _createCard(\"wild\", \"colora_changer\", 150, _colodePos.x+cardNum*0.01, _colodePos.y+cardNum*-0.1, false, i)\n            cardNum++\n            _createCard(\"wild\", \"pick_four\", 150, _colodePos.x+cardNum*0.01, _colodePos.y+cardNum*-0.1, false, i)\n        }   \n    }\n\n    _generateColode(){\n        this._createCards()\n        this._mixColode()\n    }\n\n    _mixColode(){\n        let colodeCopy = [...this._cardGroupes.colode]\n        let newColode = []\n\n        while (colodeCopy.length>0){\n            newColode.push(colodeCopy.splice(Math.floor(Math.random()*colodeCopy.length), 1)[0]) \n        }\n\n        this._cardGroupes.colode = newColode\n    }\n\n    _dealCards(){\n        let {_cardGroupes: {colode}, _botNumber, _playCard: playCard, _flipCard} = this\n        this._cardGroupes.player = colode.splice(colode.length-7, 6)\n        for(let i = 0; i<_botNumber;i++){\n            this._cardGroupes.bots[i] = colode.splice(colode.length-7, 6)\n        }\n\n       this._updateCardPosition()\n       _flipCard(colode[colode.length-1], true)\n        playCard(colode[colode.length-1])\n    this._changeActive()\n    }\n\n    _locateCard = (id, size, posX, posY, rot, z)=>{\n        this.setState(\n            (state)=>{\n                let card = {...state[id]}\n                card.size = (size ?? card[size])\n                card.posX = (posX ?? card[posX])\n                card.posY = (posY ?? card[posY])\n                card.rot = (rot ?? card[rot])\n                card.z = (z ?? card[z])\n                return {\n                    [id]: card\n                }\n            }\n        )\n    }\n\n    _flipCard = (id, facing) =>{\n        this.setState(\n            (state)=>{\n                let card = {...state[id]}\n                card.face = (facing ?? !card.face)\n                return {\n                    [id]: card\n                }\n            }\n        )\n    }\n\n    _updateCardPosition = () => {\n        let {_cardGroupes: {player, bots}, _flipCard, _locateCard} = this\n        let i = 0\n        let y = 0 - player.length / 2\n        for(let card in player){\n            _flipCard(player[card], true)\n            _locateCard(player[card], 200, 10+70 /player.length/2+(i*70 /player.length), 70+Math.abs(y*y/5.25)/player.length*10, 3*y, i)\n            y++\n            i++\n        }\n        \n\n        let botCount = 1\n        for(let bot in bots){\n            let botCrd = bots[bot]\n            i = 0\n            y = 0 - botCrd.length / 2\n            for(let card in botCrd){\n                switch (botCount) {\n                    case 1:\n                        _locateCard(botCrd[card], 120, 0-Math.abs(y*y/10),10+50 /botCrd.length/2+(i*50 /botCrd.length), 90*botCount+3*y, i)\n                    break;\n                    case 2:\n                        _locateCard(botCrd[card], 120, 20+50 /botCrd.length/2+(i*50 /botCrd.length), 0-Math.abs(y*y/5.25), 180-3*y, i)\n                    break;\n                    case 3:\n                        _locateCard(botCrd[card], 120, 93+Math.abs(y*y/10),10+50 /botCrd.length/2+(i*50 /botCrd.length), 90*botCount-3*y, i)\n                    break;\n                    default:\n\n                    break;\n                }\n                y++\n                i++\n            }\n            botCount++\n        }\n        \n\n    }\n\n    _playCard = (id) =>{\n        this._cardGroupes.move(id, \"played\")\n        this._lastZIndex += 1\n        this._flipCard(id, true)\n        this._locateCard(id, 150, 35, 35, 0, this._lastZIndex)\n        this._updateCardPosition()\n        this._newActive.push(id)\n        console.log(this._cardGroupes.active)\n    }\n\n    _changeActive = () => {\n        this._cardGroupes.active = this._newActive\n        this._newActive = []\n    }\n    \n\n    takeCard = () => {\n        let player = this.nowMoving\n        let card = this._cardGroupes.colode.shift()\n        if (player === 0){\n            this._flipCard(card, true)\n            this._cardGroupes.player.push(card)\n        }\n        else{\n            this._flipCard(card, false)\n            this._cardGroupes.bots[player-1].push(card)\n        }\n        this._updateCardPosition()\n    }\n\n    playerPlayCard = (card) => {\n        let {isPLayers, _cardGroupes: {active}, nowMoving, props: {cardAlert}} = this\n        console.log(active)\n        let activeCard = active[active-1]\n        if((card[0] === activeCard[0] || card[1] === activeCard[1] || card[0] === \"w\" || activeCard[0] === \"w\") && isPLayers(card) && nowMoving === 0){\n            this._playCard(card)\n            if (card[0] !== \"w\"){\n                this.nextMove()\n            }\n        }\n        else {\n            cardAlert()\n        }\n    }\n\n    botMove = () => {\n        let id = this.nowMoving-1\n        let {_cardGroupes: {bots, active: activeArr}, _playCard: playCard, takeCard} = this\n        let bot = bots[id]\n        let active = activeArr[activeArr.length-1]\n        let movementFinished, oneCardHasBeenTaken = false\n\n        // if (active[1] === \"p\"){\n        //     takeCard()\n        //     takeCard()\n        // }\n        // if (active.slice(0,2) === \"wp\" || beforeActive.slice(0,2) === \"wp\"){\n        //     takeCard()\n        //     takeCard()\n        //     takeCard()\n        //     takeCard()\n        // }\n        \n\n        if (active[1] === \"s\"){\n            this.nextMove()\n        }else{\n        let a = setInterval(()=>{\n            \n            let card = bot.find((elm)=>elm[0] === active[0] || elm[1] === active[1] || active[0] === 'w' )\n            setTimeout(()=>{})\n            if  (card){\n                playCard(card)\n                if ((card[0] !== \"w\" && card[1] !== \"r\")){\n                    movementFinished = true\n                }\n            }\n            else{\n                takeCard()\n                oneCardHasBeenTaken = true\n            }\n            if((oneCardHasBeenTaken || movementFinished)){\n                clearInterval(a)\n                this.nextMove()\n            }\n        }, 600)\n        }\n\n    }\n\n    isPLayers = (id) => {\n        let {player} = this._cardGroupes\n        if(player.indexOf(id) !== -1){\n            return true\n        }\n        else{\n            return false\n        }\n    }\n\n    isWining = () => {\n        let player = this.nowMoving\n        if (player){\n            \n        }\n    }\n\n    playerMove = () => {\n        let {_cardGroupes: {player, played}, takeCard,nextMove} = this\n        let beforeActive = played[played.length-2]\n        let active = played[played.length-1]\n        let cardTaken = false\n        let card = player.find((elm)=>elm[0] === active[0] || elm[1] === active[1] || elm[0] === 'w'  || active[0] === 'w' )\n        // if (active[1] === \"p\"){\n        //     takeCard()\n        //     takeCard()\n        // }\n        // if (active.slice(0,2) === \"wp\" || beforeActive.slice(0,2) === \"wp\"){\n        //     takeCard()\n        //     takeCard()\n        //     takeCard()\n        //     takeCard()\n        // }\n        this._cardGroupes.active = []\n        \n        if  (!card){\n            takeCard()\n            if (cardTaken){\n                nextMove()\n            }\n            cardTaken = true\n            nextMove()\n        }else if (card[1] === \"s\"){\n            nextMove()\n        }\n\n    }\n\n    nextMove = () => {\n        this._changeActive()\n        \n        if (this.direction){\n            switch (this.nowMoving) {\n                case this._botNumber:\n                    this.nowMoving = 0\n                break;\n                default:\n                    this.nowMoving++\n                break;\n            }\n        }\n        else{\n            switch (this.nowMoving) {\n                case 0:\n                    this.nowMoving = 3\n                break;\n                default:\n                    this.nowMoving--\n                break;\n            }\n        }\n        if (this.nowMoving !== 0){\n            setTimeout(()=>{\n                this.botMove()\n            }, 700)\n            \n        }\n        else{\n            this.playerMove()\n        }\n    }\n\n    _startGame = () => {\n        \n    }\n    \n    componentDidMount(){\n        if (!this._mounted){\n            this._generateColode()\n            this._dealCards()\n        }\n        this._mounted = true\n    }\n\n    render() {\n        let cards = this.state\n\n        return (\n            <div id='game'>\n                {\n                    Object.values(cards).map((element)=>{return <Card playCard={()=>{this.playerPlayCard(element.id)}} isPlayers={this.isPLayers} key = {element.id} {...element}/>})\n                }\n            </div>\n        );\n    \n        \n    }\n}\n\nexport default GameTable;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}